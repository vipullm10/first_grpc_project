// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: first_grpc_project.proto

#include "first_grpc_project.pb.h"
#include "first_grpc_project.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace first_grpc_project {

static const char* Adder_method_names[] = {
  "/first_grpc_project.Adder/login",
  "/first_grpc_project.Adder/add",
  "/first_grpc_project.Adder/getMultiplicationTable",
};

std::unique_ptr< Adder::Stub> Adder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Adder::Stub> stub(new Adder::Stub(channel, options));
  return stub;
}

Adder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_login_(Adder_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_(Adder_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMultiplicationTable_(Adder_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Adder::Stub::login(::grpc::ClientContext* context, const ::first_grpc_project::loginRequest& request, ::first_grpc_project::loginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::first_grpc_project::loginRequest, ::first_grpc_project::loginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_login_, context, request, response);
}

void Adder::Stub::async::login(::grpc::ClientContext* context, const ::first_grpc_project::loginRequest* request, ::first_grpc_project::loginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::first_grpc_project::loginRequest, ::first_grpc_project::loginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, std::move(f));
}

void Adder::Stub::async::login(::grpc::ClientContext* context, const ::first_grpc_project::loginRequest* request, ::first_grpc_project::loginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::first_grpc_project::loginResponse>* Adder::Stub::PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::first_grpc_project::loginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::first_grpc_project::loginResponse, ::first_grpc_project::loginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::first_grpc_project::loginResponse>* Adder::Stub::AsyncloginRaw(::grpc::ClientContext* context, const ::first_grpc_project::loginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Adder::Stub::add(::grpc::ClientContext* context, const ::first_grpc_project::addRequest& request, ::first_grpc_project::addResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::first_grpc_project::addRequest, ::first_grpc_project::addResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_add_, context, request, response);
}

void Adder::Stub::async::add(::grpc::ClientContext* context, const ::first_grpc_project::addRequest* request, ::first_grpc_project::addResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::first_grpc_project::addRequest, ::first_grpc_project::addResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_, context, request, response, std::move(f));
}

void Adder::Stub::async::add(::grpc::ClientContext* context, const ::first_grpc_project::addRequest* request, ::first_grpc_project::addResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::first_grpc_project::addResponse>* Adder::Stub::PrepareAsyncaddRaw(::grpc::ClientContext* context, const ::first_grpc_project::addRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::first_grpc_project::addResponse, ::first_grpc_project::addRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_add_, context, request);
}

::grpc::ClientAsyncResponseReader< ::first_grpc_project::addResponse>* Adder::Stub::AsyncaddRaw(::grpc::ClientContext* context, const ::first_grpc_project::addRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::first_grpc_project::tableResponse>* Adder::Stub::getMultiplicationTableRaw(::grpc::ClientContext* context, const ::first_grpc_project::tableRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::first_grpc_project::tableResponse>::Create(channel_.get(), rpcmethod_getMultiplicationTable_, context, request);
}

void Adder::Stub::async::getMultiplicationTable(::grpc::ClientContext* context, const ::first_grpc_project::tableRequest* request, ::grpc::ClientReadReactor< ::first_grpc_project::tableResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::first_grpc_project::tableResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_getMultiplicationTable_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::first_grpc_project::tableResponse>* Adder::Stub::AsyncgetMultiplicationTableRaw(::grpc::ClientContext* context, const ::first_grpc_project::tableRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::first_grpc_project::tableResponse>::Create(channel_.get(), cq, rpcmethod_getMultiplicationTable_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::first_grpc_project::tableResponse>* Adder::Stub::PrepareAsyncgetMultiplicationTableRaw(::grpc::ClientContext* context, const ::first_grpc_project::tableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::first_grpc_project::tableResponse>::Create(channel_.get(), cq, rpcmethod_getMultiplicationTable_, context, request, false, nullptr);
}

Adder::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Adder_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Adder::Service, ::first_grpc_project::loginRequest, ::first_grpc_project::loginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Adder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::first_grpc_project::loginRequest* req,
             ::first_grpc_project::loginResponse* resp) {
               return service->login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Adder_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Adder::Service, ::first_grpc_project::addRequest, ::first_grpc_project::addResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Adder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::first_grpc_project::addRequest* req,
             ::first_grpc_project::addResponse* resp) {
               return service->add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Adder_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Adder::Service, ::first_grpc_project::tableRequest, ::first_grpc_project::tableResponse>(
          [](Adder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::first_grpc_project::tableRequest* req,
             ::grpc::ServerWriter<::first_grpc_project::tableResponse>* writer) {
               return service->getMultiplicationTable(ctx, req, writer);
             }, this)));
}

Adder::Service::~Service() {
}

::grpc::Status Adder::Service::login(::grpc::ServerContext* context, const ::first_grpc_project::loginRequest* request, ::first_grpc_project::loginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Adder::Service::add(::grpc::ServerContext* context, const ::first_grpc_project::addRequest* request, ::first_grpc_project::addResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Adder::Service::getMultiplicationTable(::grpc::ServerContext* context, const ::first_grpc_project::tableRequest* request, ::grpc::ServerWriter< ::first_grpc_project::tableResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace first_grpc_project
#include <grpcpp/ports_undef.inc>

